{"name": "Partial update: Update the booking name", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [400]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000016D28494B00>\ns = 'Bad Request', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test.integration.test_integration_tc1.TestIntegrationBooking object at 0x0000016D2B0630B0>\ncreate_token = '8d032486017d4e2', get_booking_id = 5537\n\n    @pytest.mark.positive\n    @allure.title(\"Partial update: Update the booking name\")\n    @allure.description(\"Update the name of the booking that was created\")\n    def test_update_booking(self, create_token, get_booking_id):\n        logging.basicConfig(level=logging.INFO)\n        logger = logging.getLogger(__name__)\n        booking_id = get_booking_id\n        token = create_token\n        patch_url=APIConstants.url_patch_put_delete(booking_id=booking_id)\n        updated_name_payload = payload_update_booking(fields_to_update=[\"firstname\", \"lastname\"])\n        response = patch_requests(\n            url=patch_url,\n            headers=Util().common_header_put_delete_patch_cookie(token=token),\n            payload=None,\n            auth=None,\n            in_json=False\n        )\n    \n        actual_status_code = response.status_code\n>       updated_firstname = response.json().get(\"firstname\")\n\ntest_integration_tc1.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [400]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "description": "Update the name of the booking that was created", "start": 1716685343514, "stop": 1716685345157, "uuid": "ee3520e1-6180-4a93-8c9a-a7c2efb2a98e", "historyId": "c01a604f6a844fd2e28e4c982dfcc6e5", "testCaseId": "c01a604f6a844fd2e28e4c982dfcc6e5", "fullName": "tests.test.integration.test_integration_tc1.TestIntegrationBooking#test_update_booking", "labels": [{"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.test.integration"}, {"name": "suite", "value": "test_integration_tc1"}, {"name": "subSuite", "value": "TestIntegrationBooking"}, {"name": "host", "value": "ASUS15KJ"}, {"name": "thread", "value": "6128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test.integration.test_integration_tc1"}]}