{"name": "Partial update: Update the booking name", "status": "broken", "statusDetails": {"message": "TypeError: Object of type method is not JSON serializable", "trace": "create_token = <tests.test.integration.test_integration_tc1.TestIntegrationBooking object at 0x000001699E94A000>\nget_booking_id = 2909\n\n    @pytest.mark.positive\n    @allure.title(\"Partial update: Update the booking name\")\n    @allure.description(\"Update the name of the booking that was created\")\n    def test_update_booking(create_token, get_booking_id):\n        booking_id = get_booking_id\n        token = create_token\n        patch_url = APIConstants.url_patch_put_delete(booking_id=booking_id)\n        updated_name_payload = payload_update_booking(\"firstname\", \"lastname\")\n>       response = patch_requests(\n            url=patch_url,\n            headers=Util().common_header_put_delete_patch_cookie(token=token),\n            payload=updated_name_payload,\n            auth=None,\n            in_json=True\n        )\n\ntest_integration_tc1.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\src\\helpers\\api_requests_wrapper.py:20: in patch_requests\n    patch_response_data = requests.patch(url=url, headers=headers, auth=auth, data=json.dumps(payload))\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001699E4A3350>\no = <bound method Provider.first_name of <faker.providers.person.en_US.Provider object at 0x00000169A161B3B0>>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return super().default(o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type method is not JSON serializable\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:180: TypeError"}, "description": "Update the name of the booking that was created", "start": 1716727027359, "stop": 1716727027359, "uuid": "eb551c99-e656-444c-b8d5-2c81d60a7f48", "historyId": "c01a604f6a844fd2e28e4c982dfcc6e5", "testCaseId": "c01a604f6a844fd2e28e4c982dfcc6e5", "fullName": "tests.test.integration.test_integration_tc1.TestIntegrationBooking#test_update_booking", "labels": [{"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.test.integration"}, {"name": "suite", "value": "test_integration_tc1"}, {"name": "subSuite", "value": "TestIntegrationBooking"}, {"name": "host", "value": "ASUS15KJ"}, {"name": "thread", "value": "9480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test.integration.test_integration_tc1"}]}